#!/usr/bin/env python3

import os
import sys

_resources = {}

def addResource(directory, name):
    if directory not in _resources:
        _resources[directory] = []
    _resources[directory].append(name)

def gtkEncodeSymbolicSvg(outdir, path, size):
    if not os.path.isdir(outdir):
        os.makedirs(outdir)
    cmd = 'gtk-encode-symbolic-svg -o "%s" "%s" %dx%d' % (outdir, path, size, size)
    print(cmd)
    os.system(cmd)

# These need to be scaled as symbolic icons into
# 16 and their 2x and 3x counterparts
for dirname in ('actions', 'apps'):
    for name in os.listdir(os.path.join('scalable', dirname)):
        for size in (16, 32, 48):
            outdir = '%dx%d/%s' % (size, size, dirname)
            path = os.path.join('scalable', dirname, name)
            gtkEncodeSymbolicSvg(outdir, path, size)
            symbolic_name = name[:-4] + '.symbolic.png'
            addResource(outdir, symbolic_name)

# These need to be scaled as symbolic icons into
# 98x98 and 2x/3x.
for name in os.listdir('scalable/patterns'):
    for size in (98, 196, 294):
        outdir = '%dx%d/actions' % (size, size)
        # GTK won't locate the icons in "patterns", so
        # we instead put them in "actions".
        path = os.path.join('scalable/patterns', name)
        gtkEncodeSymbolicSvg(outdir, path, size)
        symbolic_name = name[:-4] + '.symbolic.png'
        addResource(outdir, symbolic_name)

# Now generate our updated .gresources.xml
with open("icons.gresource.xml", "w") as stream:
    stream.write('''<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <!-- This file is autogenerated. Do not edit this file. -->
  <gresource prefix="/org/gnome/builder/icons">
''')
    for dirname, names in _resources.items():
        names.sort()
        for name in names:
            stream.write('    <file>%s/%s</file>\n' % (dirname, name))
    stream.write('''  </gresource>
</gresources>
''')

